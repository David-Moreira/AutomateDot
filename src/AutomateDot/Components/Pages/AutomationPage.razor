@page "/automates"
@using System.Net.Http.Headers
@using System.Text.Json
@using AutomateDot.Data
@using Microsoft.EntityFrameworkCore

<PageTitle>AutomateDot | Automates</PageTitle>

<PageContainer Title="Automates">
    <TitleContent>
    </TitleContent>
    <ChildContent>
        <Loading IsLoading="_isLoading">
            <div class="flex flex-col md:flex-row mb-5">
                <button @onclick="Create" class="float-right btn btn-primary">
                    Create
                </button>
            </div>

            <Automations Data="_automations" />
        </Loading>
    </ChildContent>
</PageContainer>

@code {
    [Inject] public ILogger<AutomationPage> Logger { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public AutomationService AutomationService { get; set; } = default!;

    private List<AutomationRecipeDto> _automations = new();
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            await base.OnInitializedAsync();
            await LoadData();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            var recipes = await AutomationService.GetAll();
            _automations = recipes.Select(x => new AutomationRecipeDto()
            {
                Id = x.Id,
                Name = x.Name,
                Trigger = x.Trigger,
                Action = x.Action,
                IsActive = x.IsActive
            }).ToList();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private Task Create()
    {
        NavigationManager.NavigateTo("automates/create");
        return Task.CompletedTask;
    }
}
