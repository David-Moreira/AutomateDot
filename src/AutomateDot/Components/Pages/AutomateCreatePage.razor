@page "/automates/create"
@using AutomateDot.Components.Automate.Triggers
@using AutomateDot.Components.Automate.Actions

<PageContainer>
    <TitleContent>
        <div class="flex items-center justify-center w-full">
            <ul class="steps steps-vertical md:steps-horizontal md:w-full ">
            <li class=@($"step {(step == 0 ? "step-primary" : "")}")>Definition</li>
            <li class=@($"step {(step == 1 ? "step-primary" : "")}")>Trigger</li>
            <li class=@($"step {(step == 2 ? "step-primary" : "")}")>Action</li>
        </ul>
        </div>
    </TitleContent>
    <ChildContent>
        @if (step == 0)
        {
            <EditForm Model="DefinitionInput" OnValidSubmit="Next" method="post" class="space-y-2">
                <ObjectGraphDataAnnotationsValidator />

                <EditText @bind-Value=@DefinitionInput.Name Caption="Name" />
                <EditCheckbox @bind-Value="DefinitionInput.IsActive" Caption="Active"></EditCheckbox>

                <AlertError Message="@_error" />

                <div class="float-right">
                    <input type="button" @onclick="OnCancel" class="btn" value="Cancel" />
                    <input type="submit" class="btn btn-primary" value="Next" />
                </div>

            </EditForm>
        }
        else if (step == 1)
        {
            <EditForm Model="TriggerInput" OnValidSubmit="Next" method="post" class="space-y-2">
                <ObjectGraphDataAnnotationsValidator />

                <AutomateRecipeTrigger TriggerInput="TriggerInput" />

                <AlertError Message="@_error" />

                <div class="float-right">
                    <input type="button" @onclick="OnCancel" class="btn" value="Cancel" />
                    <input type="button" class="btn btn-secondary" value="Back" onclick="@Back" />
                    <input type="submit" class="btn btn-primary" value="Next" />
                </div>

            </EditForm>
        }
        else if (step == 2)
        {
            <EditForm Model="ActionInput" OnValidSubmit="OnValidSubmitAsync" method="post" class="space-y-2">
                <ObjectGraphDataAnnotationsValidator />

                <AutomateRecipeAction ActionInput="ActionInput" TriggerInput="TriggerInput" />

                <AlertError Message="@_error" />

                <div class="float-right">
                    <input type="button" @onclick="OnCancel" class="btn" value="Cancel" />
                    <input type="button" class="btn btn-secondary" value="Back" onclick="@Back" />
                    <input type="submit" class="btn btn-primary" value="Create" />
                </div>

            </EditForm>
        }
    </ChildContent>
</PageContainer>
@code {
    [Inject] public ILogger<AutomateCreatePage> Logger { get; set; } = default!;
    [Inject] public AutomateService AutomateService { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    public AutomateRecipeDefinitionDto DefinitionInput { get; set; } = new();
    public AutomateRecipeTriggerDto TriggerInput { get; set; } = new();
    public AutomateRecipeActionDto ActionInput { get; set; } = new();

    private int step = 0;
    private string _error = string.Empty;

    private Task Back()
    {
        if (step <= 0)
        {
            return Task.CompletedTask;
        }
        step--;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task Next()
    {
        if (step >= 2)
        {
            return Task.CompletedTask;
        }
        step++;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/automates");
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            _error = string.Empty;

            if (step == 0)
            {
                step++;
                StateHasChanged();
                return;
            }

            var newRecipe = new AutomateRecipe()
            {
                Name = DefinitionInput.Name,
                IsActive = DefinitionInput.IsActive,
                Trigger = TriggerInput.Trigger ?? throw new ArgumentNullException(),
                TriggerConfiguration = TriggerInput.GetConfiguration(),
                Action = ActionInput.Action ?? throw new ArgumentNullException(),
                ActionConfiguration = ActionInput.GetConfiguration()
            };

            await AutomateService.Add(newRecipe);
            NavigationManager.NavigateTo("automates");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unhandled exception when saving data");
            _error = Errors.UNHANDLED_EXCEPTION_NOTIFY_SUPPORT;
        }
        finally
        {
        }
    }

}