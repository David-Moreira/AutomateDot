@page "/"
@using System.Net.Http.Headers
@using System.Text.Json
@using AutomateDot.Data
@using Microsoft.EntityFrameworkCore

<PageTitle>AutomateDot</PageTitle>

<PageContainer Title="Executions">
    <ChildContent>
        <Loading IsLoading="_isLoading">
            <AutomationExecutions Data="_executions" />
        </Loading>
    </ChildContent>
</PageContainer>

@code {
    [Inject] public ApplicationDbContext ApplicationDbContext { get; set; } = default!;
    private List<AutomationExecutionDto> _executions = new();
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            await base.OnInitializedAsync();
            await LoadData();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            var executions = await ApplicationDbContext.AutomationExecutions
                    .Include(x=> x.AutomationExecutionEntries)
                    .OrderByDescending(x=> x.CreatedOn)
                    .ToListAsync();

            _executions = executions.Select(x => new AutomationExecutionDto()
            {
                Id = x.Id,
                Name = x.Name,
                CreatedOn = x.CreatedOn,
                Trigger = x.Trigger,
                Action = x.Action,
                Status = x.Status,
                AutomationExecutionEntries = x.AutomationExecutionEntries.Select(e => new AutomationExecutionEntryDto
                {
                    Id = e.Id,
                    CreatedOn = e.CreatedOn,
                    Message = e.Message
                }).ToList()
            }).ToList();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}