@page "/"
@using AutomateDot.Data

<PageContainer>
    <TitleContent>
        <div class="flex items-center justify-center w-full">
            <ul class="steps steps-vertical md:steps-horizontal md:w-full ">
            <li class=@($"step {(step == 0 ? "step-primary" : "")}")>Definition</li>
            <li class=@($"step {(step == 1 ? "step-primary" : "")}")>Trigger</li>
            <li class=@($"step {(step == 2 ? "step-primary" : "")}")>Action</li>
        </ul>
        </div>
    </TitleContent>
    <ChildContent>
        @if (step == 0)
        {
            <EditForm Model="DefinitionInput" OnValidSubmit="Next" method="post" class="space-y-2">
                <ObjectGraphDataAnnotationsValidator />

                <EditText @bind-Value=@DefinitionInput.Name Caption="Name" />

                <AlertError Message="@_error" />

                <div class="float-right">
                    <input type="submit" class="btn btn-primary" value="Next" />
                </div>

            </EditForm>
        }
        else if (step == 1)
        {
            <EditForm Model="TriggerInput" OnValidSubmit="Next" method="post" class="space-y-2">
                <ObjectGraphDataAnnotationsValidator />

                <EditSelect @bind-Value="TriggerInput.TriggerType" Caption="Trigger">
                    @foreach (var item in Enum.GetValues<TriggerType>())
                    {
                        <option value="@item">@item.ToFriendlyString()</option>
                    }
                </EditSelect>

                @if (TriggerInput.TriggerType == TriggerType.GitHubWebhook)
                {
                    <EditSelect @bind-Value="TriggerInput.GitHubWebhookTriggerConfiguration!.TriggerEvent" Caption="Event">
                        @foreach (var item in Enum.GetValues<GitHubWebhookTriggerEvent>())
                        {
                            <option value="@item">@item.ToFriendlyString()</option>
                        }
                    </EditSelect>
                    <Info>
                        Please configure your github webhook to: @NavigationManager.ToAbsoluteUri("api/webhook/github")
                    </Info>
                }

                <AlertError Message="@_error" />

                <div class="float-right">
                    <input type="button" class="btn btn-secondary" value="Back" onclick="@Back" />
                    <input type="submit" class="btn btn-primary" value="Next" />
                </div>

            </EditForm>
        }
        else if (step == 2)
        {
            <EditForm Model="ActionInput" OnValidSubmit="OnValidSubmitAsync" method="post" class="space-y-2">
                <ObjectGraphDataAnnotationsValidator />

                <EditSelect @bind-Value="ActionInput.ActionType" Caption="Action">
                    @foreach (var item in Enum.GetValues<ActionType>())
                    {
                        <option value="@item">@item.ToFriendlyString()</option>
                    }
                </EditSelect>
                @if (ActionInput.ActionType == ActionType.SendWebhook)
                {
                    <EditText @bind-Value="ActionInput.SendWebhookConfiguration!.Url" Caption="Url" />
                    <EditText @bind-Value="ActionInput.SendWebhookConfiguration!.Message" Caption="Message" />
                }
                else if (ActionInput.ActionType == ActionType.Gotify)
                {
                    <EditText @bind-Value="ActionInput.GotifyConfiguration!.Url" Caption="Url" />
                    <EditText @bind-Value="ActionInput.GotifyConfiguration!.Title" Caption="Title" />
                    <EditText @bind-Value="ActionInput.GotifyConfiguration!.Message" Caption="Message" />
                    <EditNumber @bind-Value="ActionInput.GotifyConfiguration!.Priority" Caption="Priority" />
                }

                <AlertError Message="@_error" />

                <div class="float-right">
                    <input type="button" class="btn btn-secondary" value="Back" onclick="@Back" />
                    <input type="submit" class="btn btn-primary" value="Create" />
                </div>

            </EditForm>
        }
    </ChildContent>
</PageContainer>
@code {
    [Inject] public ILogger<Home> Logger { get; set; } = default!;
    [Inject] public ApplicationDbContext ApplicationDbContext { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    public AutomationRecipeDefinitionDto DefinitionInput { get; set; } = new();
    public AutomationRecipeTriggerDto TriggerInput { get; set; } = new();
    public AutomationRecipeActionDto ActionInput { get; set; } = new();

    private int step = 0;
    private string _error = string.Empty;

    private Task Back()
    {
        if (step <= 0)
        {
            return Task.CompletedTask;
        }
        step--;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task Next()
    {
        if (step >= 2)
        {
            return Task.CompletedTask;
        }
        step++;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            _error = string.Empty;

            if (step == 0)
            {
                step++;
                StateHasChanged();
                return;
            }

            var newRecipe = new AutomationRecipe()
            {
                Name = DefinitionInput.Name,
                TriggerType = TriggerInput.TriggerType,
                TriggerConfiguration = TriggerInput.GetTriggerConfiguration(),
                ActionType = ActionInput.ActionType,
                ActionConfiguration = ActionInput.GetActionConfiguration()
            };

            await ApplicationDbContext.AddAsync(newRecipe);
            await ApplicationDbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unhandled exception when saving data");
            _error = Errors.UNHANDLED_EXCEPTION_NOTIFY_SUPPORT;
        }
        finally
        {
        }
    }

}