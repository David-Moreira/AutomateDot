@using System.Linq.Expressions
@typeparam TValue

<fieldset class=@($"fieldset {ContainerClass}") >
    <legend class="fieldset-legend">@Caption</legend>
    <InputNumber Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression" class="input w-full" @attributes="@AdditionalAttributes" />
    <ValidationMessage For="@ValueExpression" />
</fieldset>

@code{
    [Parameter] public string ContainerClass { get; set; } = string.Empty;
    [Parameter] public string Caption { get; set; } = string.Empty;
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue?>>? ValueExpression { get; set; }

    [Parameter( CaptureUnmatchedValues = true )] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnInitialized()
    {
        if ( ValueExpression is null )
        {
            ValueExpression = () => Value;
        }
        base.OnInitialized();
    }
}
