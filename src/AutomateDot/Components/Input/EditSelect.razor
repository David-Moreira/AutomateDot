@using System.Linq.Expressions
@typeparam TValue

<fieldset class="fieldset" >
    @if (!string.IsNullOrEmpty(Caption))
    {
        <legend class="fieldset-legend">@Caption</legend>
    }
    <InputSelect TValue="TValue" Value="@Value" ValueChanged="@ValueChanged" ValueExpression="@ValueExpression" class="select w-full" @attributes="@AdditionalAttributes">
        @ChildContent
    </InputSelect>
    @if ( EditContext is not null )
    {
        <ValidationMessage For="@ValueExpression" />
    }
</fieldset>

@code {
    [CascadingParameter] public EditContext? EditContext { get; set; }
    [Parameter] public string Caption { get; set; } = string.Empty;
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<TValue?>>? ValueExpression { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter( CaptureUnmatchedValues = true )] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    protected override void OnInitialized()
    {
        if ( ValueExpression is null )
        {
            ValueExpression = () => Value;
        }
        base.OnInitialized();
    }
}
